[{"/home/ec2-user/environment/Project3/src/index.js":"1","/home/ec2-user/environment/Project3/src/App.js":"2","/home/ec2-user/environment/Project3/src/reportWebVitals.js":"3","/home/ec2-user/environment/Project3/src/Activity.js":"4","/home/ec2-user/environment/Project3/src/Nav.js":"5","/home/ec2-user/environment/Project3/src/JoinTrip.js":"6","/home/ec2-user/environment/Project3/src/TripHome.js":"7","/home/ec2-user/environment/Project3/src/components/HomePage.js":"8","/home/ec2-user/environment/Project3/src/CreateTrip.js":"9","/home/ec2-user/environment/Project3/src/Login.js":"10","/home/ec2-user/environment/Project3/src/Logout.js":"11","/home/ec2-user/environment/Project3/src/api/api.js":"12","/home/ec2-user/environment/Project3/src/refreshToken.js":"13","/home/ec2-user/environment/Project3/src/InputEmails.js":"14"},{"size":500,"mtime":1617893326172,"results":"15","hashOfConfig":"16"},{"size":2940,"mtime":1618775315704,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1617893326172,"results":"18","hashOfConfig":"16"},{"size":707,"mtime":1618546369779,"results":"19","hashOfConfig":"16"},{"size":1989,"mtime":1618854330050,"results":"20","hashOfConfig":"16"},{"size":586,"mtime":1618594605792,"results":"21","hashOfConfig":"16"},{"size":502,"mtime":1618775315708,"results":"22","hashOfConfig":"16"},{"size":904,"mtime":1618530659116,"results":"23","hashOfConfig":"16"},{"size":3459,"mtime":1618844297777,"results":"24","hashOfConfig":"16"},{"size":1130,"mtime":1618853991876,"results":"25","hashOfConfig":"16"},{"size":736,"mtime":1618546125987,"results":"26","hashOfConfig":"16"},{"size":1557,"mtime":1618530577455,"results":"27","hashOfConfig":"16"},{"size":720,"mtime":1617991110130,"results":"28","hashOfConfig":"16"},{"size":1369,"mtime":1618844434450,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"168wlww",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},"/home/ec2-user/environment/Project3/src/index.js",[],["63","64"],"/home/ec2-user/environment/Project3/src/App.js",[],"/home/ec2-user/environment/Project3/src/reportWebVitals.js",[],"/home/ec2-user/environment/Project3/src/Activity.js",[],"/home/ec2-user/environment/Project3/src/Nav.js",[],"/home/ec2-user/environment/Project3/src/JoinTrip.js",[],"/home/ec2-user/environment/Project3/src/TripHome.js",[],"/home/ec2-user/environment/Project3/src/components/HomePage.js",["65","66","67","68","69"],"import React, { useState } from 'react';\nimport Login from '../Login.js';\nimport Logout from '../Logout.js';\nimport Activity from '../Activity.js';\nimport {loginApi, userApi} from '../api/api.js';\n\nfunction HomePage(props){\n    \n  function onClickButton() {\n    userApi(props.currentToken).then(data => console.log('Verified Status:', props));\n  }\n  //<button onClick={onClickButton} type=\"button\">Test API</button>\n  // { props.isAuth && 'Token ID: ' && props.currentToken }\n  return (\n            <div className=\"activity\">\n             {props.isAuth && <Login tokenHandler={props.token} \n             authHandler={props.auth}/>?(\n             <div>\n\n             <h3>Welcome to your Home Page</h3>\n              <p>{userApi}</p>\n             </div>\n             )\n             :null}\n\n\n\n        </div>\n  )\n}\n\nexport default HomePage;\n\n//<button onClick={onClickButton} type=\"button\">Test API</button> ","/home/ec2-user/environment/Project3/src/CreateTrip.js",["70","71","72"],"import Login from './Login.js';\nimport TripHome from './TripHome';\nimport React, { useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport './App.css';\nimport InputEmails from './InputEmails';\nimport { useHistory, BrowserRouter as Router,Route, Link} from \"react-router-dom\";\n//import 'react-datetime/css/react-datetime.css';\n/* eslint-disable react/jsx-props-no-spreading */\nfunction CreateTrip(props){\n    const history = useHistory();\n    //const user = useState('');\n\n    const { register, handleSubmit, formState: { errors } } = useForm();\n    // Random invitation code\n    var result = '';\n    \n // const onSubmit = data => console.log(data);\n  function onSubmit(data){\n      console.log(data);\n      // doesnt redirect till all fields are filled up\n      history.push(\"/TripHome\");\n  }\n  \n  function invitationCode(){\n    var chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    for (var i = 7; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    // result is the random Code that must be emailed to the participants\n    return result;\n  }\n\n    return(\n        <div className=\"activity\">\n            {props.isAuth && <Login tokenHandler={props.token} authHandler={props.auth}/>?(\n            <div>\n                <h3>Welcome to your Create Trip!</h3>\n                <form onSubmit={handleSubmit(onSubmit)}>\n\n                        <div><label for=\"Name\" className=\"labels\">Trip Name:</label>\n                        <input required type=\"text\" id=\"Name\" className=\"createTripInputs\" placeholder=\"Trip Name*\" {...register(\"Trip Name\", {required: true, maxLength: 17})} /></div>\n\n                        <div className=\"lines\">____________________________________________________________________________________</div>\n                        \n                        <div><label for=\"tripStart\" className=\"labels\">Trip's Start Date:</label>\n                        <input required type=\"date\" id=\"tripStart\" className=\"createTripInputs\" placeholder=\"Start Date\" {...register(\"Start Date\", {required: true})} /></div>\n                        \n                        <div className=\"lines\">____________________________________________________________________________________</div>\n                        \n                        <div><label for=\"tripEnd\" className=\"labels\">Trip's End Date:</label>\n                        <input required type=\"date\" id=\"tripEnd\" className=\"createTripInputs\" placeholder=\"End Date\" {...register(\"End Date\", {required: true})} /></div>\n                        \n                        <div className=\"lines\">____________________________________________________________________________________</div>\n                        \n                        <div><label className=\"labels\">Enter Participant's Gmail Accounts:</label>\n                        <InputEmails/></div>\n                        \n                        <div className=\"lines\">____________________________________________________________________________________</div>\n                        <div><button type=\"submit\">Submit</button></div>\n                        <div>{invitationCode()}</div>\n                </form>\n            </div>)\n            :null}\n\n            <Router>\n                <div>\n                    <Route path=\"/TripHome\" component={TripHome}/>\n                </div>\n            </Router>\n\n                \n        </div>\n        );\n}\n\nexport default CreateTrip;\n","/home/ec2-user/environment/Project3/src/Login.js",[],"/home/ec2-user/environment/Project3/src/Logout.js",[],"/home/ec2-user/environment/Project3/src/api/api.js",["73","74"],"const fetch = require(\"node-fetch\");\n\nconst loginApi = (tokenId) => {\n    //console.log('token id is', tokenId);\n    const data = {'token_id': tokenId};\n    //console.log('data is', data)\n    return fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n    }).then(response => response.json());\n};\n\nconst logoutApi = (tokenId) => {\n    const data = {'token_id': tokenId};\n    return fetch('/api/auth/logout', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n    }).then(response => response.json());\n};\n\nconst userApi = (tokenId) => {\n    return fetch('/api/user', {\n        method: 'GET',\n        headers: {\n            'Authorization': 'Bearer ' + tokenId,\n            'Content-Type': 'application/json',\n        }\n    }).then(response => response.json());\n};\n\n\nconst joinTripApi = (tokenId) => {\n    return fetch('/api/joinTrip', {\n        method: 'GET',\n        headers: {\n            'Authorization': 'Bearer ' + tokenId,\n            'Content-Type': 'application/json',\n        }\n    }).then(response => response.json());\n};\n\nconst tripIdApi = (tokenId) => {\n    return fetch('/api/trip/trip_id={id}', {\n        method: 'GET',\n        headers: {\n            'Authorization': 'Bearer ' + tokenId,\n            'Content-Type': 'application/json',\n        }\n    }).then(response => response.json());\n};\nexport {\n    loginApi,\n    logoutApi,\n    userApi\n}","/home/ec2-user/environment/Project3/src/refreshToken.js",[],"/home/ec2-user/environment/Project3/src/InputEmails.js",["75","76","77"],"import Login from './Login.js';\nimport TripHome from './TripHome';\nimport React, { useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport './App.css';\n\nfunction InputEmails() {\n  // email consists of the list of all emails\n  const [email, setEmail] = useState([{ value: null }]);\n \n  function handleChange(i, event) {\n    const values = [...email];\n    values[i].value = event.target.value;\n    setEmail(values);\n  }\n  console.log(email)\n\n  function handleAdd() {\n    const values = [...email];\n    values.push({ value: null });\n    setEmail(values);\n  }\n\n  function handleRemove(i) {\n    const values = [...email];\n    values.splice(i, 1);\n    setEmail(values);\n  }\n\n  return (\n    <div className=\"inputEmail\">\n\n      {email.map((field, idx) => {\n        return (\n          <div key={`${field}-${idx}`}>\n            <input required\n              className=\"createTripInputs\"\n              type=\"text\"\n              placeholder=\"Participant's Gmail*\"\n              onChange={e => handleChange(idx, e)}\n            />\n            <button type=\"button\" className=\"removeParticipants\" onClick={() => handleRemove(idx)}>\n              Remove\n            </button>\n          </div>\n        );\n      })}\n\n      <button type=\"button\" onClick={() => handleAdd()}>\n        Add Participant\n      </button>\n      \n    </div>\n  );\n}\nexport default InputEmails;\n",{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":25},{"ruleId":"82","severity":1,"message":"86","line":3,"column":8,"nodeType":"84","messageId":"85","endLine":3,"endColumn":14},{"ruleId":"82","severity":1,"message":"87","line":4,"column":8,"nodeType":"84","messageId":"85","endLine":4,"endColumn":16},{"ruleId":"82","severity":1,"message":"88","line":5,"column":9,"nodeType":"84","messageId":"85","endLine":5,"endColumn":17},{"ruleId":"82","severity":1,"message":"89","line":9,"column":12,"nodeType":"84","messageId":"85","endLine":9,"endColumn":25},{"ruleId":"82","severity":1,"message":"83","line":3,"column":17,"nodeType":"84","messageId":"85","endLine":3,"endColumn":25},{"ruleId":"82","severity":1,"message":"90","line":7,"column":53,"nodeType":"84","messageId":"85","endLine":7,"endColumn":57},{"ruleId":"82","severity":1,"message":"91","line":14,"column":50,"nodeType":"84","messageId":"85","endLine":14,"endColumn":56},{"ruleId":"82","severity":1,"message":"92","line":38,"column":7,"nodeType":"84","messageId":"85","endLine":38,"endColumn":18},{"ruleId":"82","severity":1,"message":"93","line":48,"column":7,"nodeType":"84","messageId":"85","endLine":48,"endColumn":16},{"ruleId":"82","severity":1,"message":"94","line":1,"column":8,"nodeType":"84","messageId":"85","endLine":1,"endColumn":13},{"ruleId":"82","severity":1,"message":"95","line":2,"column":8,"nodeType":"84","messageId":"85","endLine":2,"endColumn":16},{"ruleId":"82","severity":1,"message":"96","line":4,"column":10,"nodeType":"84","messageId":"85","endLine":4,"endColumn":17},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Logout' is defined but never used.","'Activity' is defined but never used.","'loginApi' is defined but never used.","'onClickButton' is defined but never used.","'Link' is defined but never used.","'errors' is assigned a value but never used.","'joinTripApi' is assigned a value but never used.","'tripIdApi' is assigned a value but never used.","'Login' is defined but never used.","'TripHome' is defined but never used.","'useForm' is defined but never used.","no-global-assign","no-unsafe-negation"]