[{"/home/ec2-user/environment/Project3/src/index.js":"1","/home/ec2-user/environment/Project3/src/App.js":"2","/home/ec2-user/environment/Project3/src/reportWebVitals.js":"3","/home/ec2-user/environment/Project3/src/JoinTrip.js":"4","/home/ec2-user/environment/Project3/src/Nav.js":"5","/home/ec2-user/environment/Project3/src/CreateTrip.js":"6","/home/ec2-user/environment/Project3/src/Trip.js":"7","/home/ec2-user/environment/Project3/src/Activity.js":"8","/home/ec2-user/environment/Project3/src/components/HomePage.js":"9","/home/ec2-user/environment/Project3/src/Logout.js":"10","/home/ec2-user/environment/Project3/src/Login.js":"11","/home/ec2-user/environment/Project3/src/api/api.js":"12","/home/ec2-user/environment/Project3/src/InputEmails.js":"13","/home/ec2-user/environment/Project3/src/refreshToken.js":"14"},{"size":500,"mtime":1617932993876,"results":"15","hashOfConfig":"16"},{"size":2631,"mtime":1619470375205,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1617824026869,"results":"18","hashOfConfig":"16"},{"size":968,"mtime":1619621402858,"results":"19","hashOfConfig":"16"},{"size":1955,"mtime":1619480894382,"results":"20","hashOfConfig":"16"},{"size":3049,"mtime":1619489743432,"results":"21","hashOfConfig":"16"},{"size":2647,"mtime":1619729942632,"results":"22","hashOfConfig":"16"},{"size":3805,"mtime":1619636889249,"results":"23","hashOfConfig":"16"},{"size":3484,"mtime":1619635425254,"results":"24","hashOfConfig":"16"},{"size":696,"mtime":1619556001444,"results":"25","hashOfConfig":"16"},{"size":1418,"mtime":1619556001440,"results":"26","hashOfConfig":"16"},{"size":3125,"mtime":1619724173697,"results":"27","hashOfConfig":"16"},{"size":1561,"mtime":1619533389278,"results":"28","hashOfConfig":"16"},{"size":720,"mtime":1618970963545,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"168wlww",{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/home/ec2-user/environment/Project3/src/index.js",[],["64","65"],"/home/ec2-user/environment/Project3/src/App.js",["66","67"],"import { useState, useEffect } from 'react';\nimport './App.css';\n//import Login from'./Login';\n//import Logout from'./Logout';\nimport HomePage from './components/HomePage';\nimport Nav from './Nav';\nimport Activity from './Activity';\nimport JoinTrip from './JoinTrip';\nimport CreateTrip from './CreateTrip';\nimport Trip from './Trip';\n\n\nimport {BrowserRouter as Router, HashRouter, Switch,Route} from \"react-router-dom\";\n// removed props from App()\nfunction App() {\n    const [isAuthenticated, setAuth] = useState(false);\n    const [tokenId, setTokenId] = useState('');\n    \n    // When components gets added to the DOM tree, state is loaded from localStorage (if available)\n    useEffect(() => {\n      let storedAuth = localStorage.getItem('isAuth') === 'true';\n      let storedTokenId = localStorage.getItem('tokenId');\n      let newAuth = isAuthenticated;\n      let newToken = tokenId;\n      if(storedAuth !== undefined)\n        newAuth = storedAuth;\n      if(storedTokenId !== undefined)\n        newToken = storedTokenId;\n      setAuth(newAuth);\n      setTokenId(newToken);\n    }, []);\n  \n    // Update the authenticated state and token ID\n    function loginHandler(tokenId){\n      setAuth(true);\n      setTokenId(tokenId);\n      localStorage.setItem(\"isAuth\", true);\n      localStorage.setItem('tokenId', tokenId );\n    }\n    \n    // Clear the authenticated state and token ID\n    function logoutHandler(){\n      setAuth(false);\n      setTokenId(\"\");\n      localStorage.setItem(\"isAuth\", false);\n      localStorage.setItem('tokenId', \"\" );\n    }\n    //<Route path=\"/trip\" render={(props) => ( <Trip logout={logoutHandler} isAuth={isAuthenticated} token={tokenId} /> )}/>\n    return (\n    <HashRouter>\n    <div className=\"App\">\n        <Nav login={loginHandler} logout={logoutHandler} isAuth={isAuthenticated} token={tokenId}/>\n        <Switch>\n          <Route exact path=\"/home\" render={(props) => ( <HomePage logout={logoutHandler} isAuth={isAuthenticated} token={tokenId} /> )}/>\n          <Route exact path=\"/activity\" render={(props) => ( <Activity logout={logoutHandler} isAuth={isAuthenticated} token={tokenId} /> )}/>\n          <Route exact path=\"/jointrip\" render={(props) => ( <JoinTrip logout={logoutHandler} isAuth={isAuthenticated} token={tokenId} /> )}/>\n          <Route exact path=\"/createtrip\" render={(props) => ( <CreateTrip logout={logoutHandler} isAuth={isAuthenticated} token={tokenId} /> )}/>\n          <Route path=\"/trip/:tripId\" render={(props) => ( <Trip logout={logoutHandler} isAuth={isAuthenticated} token={tokenId} /> )}/>\n        </Switch>\n      </div>\n    </HashRouter>);\n};\n\nexport default App;","/home/ec2-user/environment/Project3/src/reportWebVitals.js",[],"/home/ec2-user/environment/Project3/src/JoinTrip.js",[],"/home/ec2-user/environment/Project3/src/Nav.js",[],"/home/ec2-user/environment/Project3/src/CreateTrip.js",["68","69"],"import Trip from './Trip';\nimport React, { useState } from 'react';\n\n\nimport { createTripApi, inviteToTripApi } from './api/api.js';\n\nimport { useForm } from \"react-hook-form\";\nimport './App.css';\nimport { getInvitedEmails, InputEmails } from './InputEmails';\nimport { useHistory, BrowserRouter as Router,Route, Link} from \"react-router-dom\";\n/* eslint-disable react/jsx-props-no-spreading */\nfunction CreateTrip(props){\n    const history = useHistory();\n    //const user = useState('');\n    const { register, handleSubmit } = useForm();\n    \n    var code = \"\";\n    function joinCode() {\n      \n      var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    \n      for (var i = 0; i < 7; i++)\n        code += possible.charAt(Math.floor(Math.random() * possible.length));\n      return code;\n    }\n    \n\n // const onSubmit = data => console.log(data);\n  function onSubmit(data){\n      console.log(data);\n      data.join_code=joinCode();\n      // doesnt redirect till all fields are filled up\n      if(props.token !== \"\"){\n            createTripApi(props.token, data).then(data => history.push('/trip/' + data.tripId));\n      }\n      const emails = getInvitedEmails().map(email => email['value'])\n      console.log(emails);\n      \n      if(emails !== []){\n          inviteToTripApi(props.token, emails, data['join_code'])\n      }\n    }\n// sample Trip1- code: uw1YGGD\n\n    return(\n        <div className=\"activity\">\n            {props.isAuth?(\n            <div>\n                <h3 className=\"headingClass\">Create a new trip!</h3>\n                <form onSubmit={handleSubmit(onSubmit)}>\n\n                        <div><label for=\"Name\" className=\"labels\"> Enter Trip name :</label>\n                        <input required type=\"text\" id=\"Name\" className=\"createTripInputs1\" placeholder=\"eg., Vegas\" {...register(\"trip_name\", {required: true, maxLength: 17})} /></div>\n                        \n                        <div><label for=\"tripStart\" className=\"labels\">Trip's Start Date:</label>\n                        <input required type=\"date\" id=\"tripStart\" className=\"createTripInputs\" placeholder=\"Start Date\" {...register(\"Start Date\", {required: true})} /></div>\n                      \n                        <div><label for=\"tripEnd\" className=\"labels\"> Trip's End Date :</label>\n                        <input required type=\"date\" id=\"tripEnd\" className=\"createTripInputs\" placeholder=\"End Date\" {...register(\"End Date\", {required: true})}/></div>\n                       \n                        <div><label className=\"labels\">Invite Participants: </label>\n                        <InputEmails/></div>\n                        <hr/>\n                        <div><button type=\"submit\" className=\"tripSubmit\">Create Trip</button></div>\n                </form>\n            </div>)\n            :null}\n\n            <Router>\n                <div>\n                    <Route path=\"/trip\" component={Trip}/>\n                </div>\n            </Router>\n\n                \n        </div>\n        );\n}\n\nexport default CreateTrip;\n","/home/ec2-user/environment/Project3/src/Trip.js",["70","71","72","73","74","75","76"],"/home/ec2-user/environment/Project3/src/Activity.js",["77"],"import Login from './Login.js';\nimport {useState} from 'react';\nimport './App.css';\n\n//import { BrowserRouter as Router,Switch,Route, Link} from \"react-router-dom\";\n\nfunction Activity(){\n  \n    const [inputList, setInputList] = useState([{ activityName: \"\", amount: \"\", participants: \"\"  }]);\n    const [showbtn, setShowBtn] = useState(true);\n    \n          // get all the users in the trip from the database\n  function splitMoney(){\n    console.log('heres the inputlist passed',inputList)\n    // var mtLst;\n    // for (const [index, value] of inputList[index].participants.entries()) {\n    //   console.log('trying for loop ',value);\n    // }\n    // console.log('mtlst here ',mtLst)\n    if (inputList[0].participants !== \"\"){\n      var lst = (inputList[0].participants.split(/[ ,]+/));\n      console.log(lst)\n      if(inputList[0].amount !== \"\"){\n        var splitAmount = (inputList[0].amount)/lst.length;\n        console.log(\"split amount is \",splitAmount);\n        return(\n          <div>Money split per person is {splitAmount}</div>\n          );\n      }\n    }\n  }\n    \n    // handle input change\n    const handleInputChange = (e, index) => {\n      const { name, value } = e.target;\n      const list = [...inputList];\n      list[index][name] = value;\n      setInputList(list);\n      console.log(list)\n      console.log(list[index])\n    \n      if (list[index].activityName !== \"\" && list[index].amount !== \"\" && list[index].participants !== \"\")\n        {setShowBtn(false);}\n        \n      splitMoney();\n      // list.map((list,index)=>{ \n      //   if (list[index].activityName !== \"\" && list[index].amount !== \"\" && list[index].participants !== \"\")\n      //   {setShowBtn(false);}\n      // });\n      \n    };\n     \n    // handle click event of the Remove button\n    const handleRemoveClick = index => {\n      const list = [...inputList];\n      list.splice(index, 1);\n      setInputList(list);\n    };\n     \n    // handle click event of the Add button\n    const handleAddClick = () => {\n      setInputList([...inputList, { activityName: \"\", amount: \"\", participants: \"\" }]);\n    };\n    \n    return (\n      <div className=\"Activity\">\n      <h3>Your Activities for the trip:</h3>\n        {inputList.map((x, i) => {\n          return (\n            <div className=\"box\">\n              <input\n                required\n                type=\"text\"\n                \n                name=\"activityName\"\n                className=\"ml10\"\n                placeholder=\"Enter Activity Name\"\n                value={x.activityName}\n                onChange={e => handleInputChange(e, i)}\n              />\n              <input\n                required\n                type=\"text\"\n                name=\"amount\"\n                className=\"ml10\"\n                placeholder=\"Enter Amount\"\n                value={x.amount}\n                onChange={e => handleInputChange(e, i)}\n              />\n              <input\n                required\n                type=\"text\"\n                className=\"ml101\"\n                name=\"participants\"\n                placeholder=\"Participant Email#1, Email#2,..\"\n                value={x.participants}\n                onChange={e => handleInputChange(e, i)}\n              />\n              <div className=\"btn-box\">\n                {inputList.length !== 1 && <button\n                  className=\"mr10\"\n                  \n                  onClick={() => handleRemoveClick(i)}>Remove</button>}\n                {inputList.length - 1 === i && <button onClick={handleAddClick} disabled={showbtn} >Add</button>}\n                \n              </div>\n             \n            </div>\n            \n          );\n        })}\n        \n        {console.log(inputList)}\n        <div style={{ marginTop: 20 }}>{JSON.stringify(inputList)}</div>\n        \n      </div>\n    );\n}\n\nexport default Activity;\n","/home/ec2-user/environment/Project3/src/components/HomePage.js",["78","79"],"import { useState, useEffect } from 'react';\n// import Login from'../Login.js';\n// import Logout from'../Logout.js';\n//import {loginApi, userApi} from '../api/api.js';\nimport { userApi,deleteTripIdApi} from '../api/api.js';\n\nfunction HomePage(props){\n    \n    const [isViewable, setViewable] = useState(false);\n    const [email, setEmail] = useState(\"\");\n    const [firstName, setFirstName] = useState(\"\");\n    const [lastName, setLastName] = useState(\"\");\n    const [trips, setTrips] = useState([]);\n    const [hide, setHide]=useState(false);\n    \n    function randomImages(){\n      var images = [\"https://i.stack.imgur.com/CJT47.jpg\",\"https://www.freegreatpicture.com/files/85/2994-man-and-nature.jpg\"\n                    ,\"https://www.freegreatpicture.com/files/31/10971-world-scenery.jpg\"\n                    ,\"https://media.cntraveler.com/photos/5949abf42bd0d42819c6065e/master/pass/Big-Bend-GettyImages-516259396.jpg\"\n                    ,\"https://media.timeout.com/images/105685502/image.jpg\"];\n     var randomImage = images[Math.floor(Math.random()*images.length)];\n      return randomImage;\n    }\n    \n    \n    function updateData(data){\n      // If the user data API call fails, log the user out.\n      if(data.hasOwnProperty('success')){\n        if(data.success === false){\n          props.logout();\n        }\n        else{\n          setEmail(data.email);\n          setLastName(data.lastName);\n          setFirstName(data.firstName);\n          setTrips(data.trips);\n          //console.log(data.trips);\n        }\n      }\n\n    }\n    function deleteTrip(trip_id)\n    {\n      alert(\"Deleteing the Trip \"+trip_id)\n      if(props.token !== \"\")\n        {\n          deleteTripIdApi(props.token, trip_id).then(data => console.log(data));\n        }\n      \n      \n    }\n    \n    //Rerender component when token ID and isAuth updates.\n    useEffect(() => {\n      //If user is logged in and the token ID is valid, update home page\n      if(props.token !== \"\" && props.isAuth)\n        userApi(props.token).then(data => updateData(data)).then(data => setViewable(true));\n  \n      //Upon user logout, clear all user data\n      if(!props.isAuth){\n        setEmail(\"\");\n        setLastName(\"\");\n        setFirstName(\"\");\n        setViewable(false);\n      }\n    }, [props.token, props.isAuth]);\n// <button className=\"tripsButton\">{trip.name} </button>\n  \n  if(isViewable){\n    return (\n      <div className=\"homePage\">\n        <h2>Hello, {firstName}!</h2>\n        <h5>Email: {email}</h5>\n        <h5>Last Name: {lastName}</h5>\n        <div>\n          <button className=\"hideButton\" onClick={()=>{setHide(!hide)}} >Show / Hide Trips<br /></button>\n        </div>\n        {trips.map((trip, index) => {\n        return (\n        <div>\n        {!hide ? (\n        <div className=\"container\">\n        \n            <div className=\"col\">\n              <a href={`/#/trip/${trip.trip_id}`}>\n                <img className=\"images\" src={randomImages()}/>\n                <span className=\"align-middle\">{trip.name}</span>\n                <div>\n                  \n                </div>\n              </a>\n              <button type=\"submit\" onClick={()=>deleteTrip(trip.trip_id)}>Delete</button>\n              </div>\n            </div>\n       \n          ):null}\n        </div>\n        \n        );\n      })}\n      </div>\n    );\n  }\n  else{\n    return (<div>\n      <h2>Please log in!</h2>\n    </div>\n    );\n  }\n}\n\nexport default HomePage;\n\n//<button onClick={onClickButton} type=\"button\">Test API</button> ","/home/ec2-user/environment/Project3/src/Logout.js",[],"/home/ec2-user/environment/Project3/src/Login.js",[],"/home/ec2-user/environment/Project3/src/api/api.js",["80"],"const fetch = require(\"node-fetch\");\n\nconst loginApi = (tokenId) => {\n    const data = {'token_id': tokenId};\n    return fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n    }).then(response => response.json());\n};\n\nconst logoutApi = (tokenId) => {\n    const data = {'token_id': tokenId};\n    return fetch('/api/auth/logout', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n    }).then(response => response.json());\n};\n\nconst userApi = (tokenId) => {\n    return fetch('/api/user', {\n        method: 'GET',\n        headers: {\n            'Authorization': 'Bearer ' + tokenId,\n            'Content-Type': 'application/json',\n        }\n    }).then(response => response.json());\n};\n\nconst createTripApi = (tokenId, tripData) => {\n    const data = {'trip_data': tripData};\n    return fetch('/api/trip/create', {\n        method: 'POST',\n        headers: {\n            'Authorization': 'Bearer ' + tokenId,\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n    }).then(response => response.json());\n};\n\nconst inviteToTripApi = (tokenId, emails, joinCode) => {\n    const data = {'invited_emails': emails,\n                  'join_code': joinCode};\n    return fetch('/api/trip/invite', {\n        method: 'POST',\n        headers: {\n            'Authorization': 'Bearer ' + tokenId,\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n    }).then(response => response.json());\n};\n\nconst joinTripApi = (tokenId, joinCode) => {\n    const data = {'join_code': joinCode};\n    return fetch('/api/trip/join', {\n        method: 'POST',\n        headers: {\n            'Authorization': 'Bearer ' + tokenId,\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n    }).then(response => response.json());\n};\n\nconst tripIdApi = (tokenId, tripId) => {\n    return fetch('/api/trip?tripId=' + tripId, {\n        method: 'GET',\n        headers: {\n            'Authorization': 'Bearer ' + tokenId,\n            'Content-Type': 'application/json',\n        }\n    }).then(response => response.json());\n};\n\nconst deleteTripIdApi = (tokenId, tripId) => {\n    const data = {\"trip_id\": tripId}\n    return fetch('/api/trip/delete', {\n        method: 'DELETE',\n        headers: {\n            'Authorization': 'Bearer ' + tokenId,\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n    }).then(response => response.json());\n};\n\nconst getActivityApi = (tokenId, activityId) => {\n    return fetch('/api/activity/get?activity_id=' + activityId, {\n        method: 'GET',\n        headers: {\n            'Authorization': 'Bearer ' + tokenId,\n            'Content-Type': 'application/json',\n        }\n    }).then(response => response.json());\n};\n\nexport {\n    loginApi,\n    logoutApi,\n    createTripApi,\n    inviteToTripApi,\n    joinTripApi,\n    tripIdApi,\n    userApi,\n    deleteTripIdApi\n};","/home/ec2-user/environment/Project3/src/InputEmails.js",[],"/home/ec2-user/environment/Project3/src/refreshToken.js",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":13,"column":26,"nodeType":"87","messageId":"88","endLine":13,"endColumn":32},{"ruleId":"89","severity":1,"message":"90","line":31,"column":8,"nodeType":"91","endLine":31,"endColumn":10,"suggestions":"92"},{"ruleId":"85","severity":1,"message":"93","line":2,"column":17,"nodeType":"87","messageId":"88","endLine":2,"endColumn":25},{"ruleId":"85","severity":1,"message":"94","line":10,"column":53,"nodeType":"87","messageId":"88","endLine":10,"endColumn":57},{"ruleId":"85","severity":1,"message":"95","line":4,"column":20,"nodeType":"87","messageId":"88","endLine":4,"endColumn":27},{"ruleId":"85","severity":1,"message":"96","line":12,"column":12,"nodeType":"87","messageId":"88","endLine":12,"endColumn":21},{"ruleId":"85","severity":1,"message":"97","line":13,"column":13,"nodeType":"87","messageId":"88","endLine":13,"endColumn":22},{"ruleId":"85","severity":1,"message":"98","line":13,"column":24,"nodeType":"87","messageId":"88","endLine":13,"endColumn":36},{"ruleId":"85","severity":1,"message":"99","line":14,"column":12,"nodeType":"87","messageId":"88","endLine":14,"endColumn":20},{"ruleId":"85","severity":1,"message":"100","line":14,"column":22,"nodeType":"87","messageId":"88","endLine":14,"endColumn":33},{"ruleId":"89","severity":1,"message":"101","line":32,"column":7,"nodeType":"91","endLine":32,"endColumn":20,"suggestions":"102"},{"ruleId":"85","severity":1,"message":"103","line":1,"column":8,"nodeType":"87","messageId":"88","endLine":1,"endColumn":13},{"ruleId":"89","severity":1,"message":"104","line":66,"column":8,"nodeType":"91","endLine":66,"endColumn":35,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":86,"column":17,"nodeType":"108","endLine":86,"endColumn":63},{"ruleId":"85","severity":1,"message":"109","line":94,"column":7,"nodeType":"87","messageId":"88","endLine":94,"endColumn":21},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isAuthenticated' and 'tokenId'. Either include them or remove the dependency array.","ArrayExpression",["112"],"'useState' is defined but never used.","'Link' is defined but never used.","'userApi' is defined but never used.","'tripUsers' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'setIsLoading' is assigned a value but never used.","'fullname' is assigned a value but never used.","'setFullname' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.isAuth' and 'tripId'. Either include them or remove the dependency array.",["113"],"'Login' is defined but never used.","React Hook useEffect has a missing dependency: 'updateData'. Either include it or remove the dependency array.",["114"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'getActivityApi' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},"Update the dependencies array to be: [isAuthenticated, tokenId]",{"range":"121","text":"122"},"Update the dependencies array to be: [props.isAuth, props.token, tripId]",{"range":"123","text":"124"},"Update the dependencies array to be: [props.token, props.isAuth, updateData]",{"range":"125","text":"126"},[1084,1086],"[isAuthenticated, tokenId]",[1080,1093],"[props.isAuth, props.token, tripId]",[2258,2285],"[props.token, props.isAuth, updateData]"]